// This is a derivative work of roger peppe's stackgraph command.
// For more details, see http://code.google.com/p/rog-go/
//

package traceback

type StackStatus string

const (
	StackStatusChanReceive    StackStatus = "chan receive"
	StackStatusChanReceiveNil StackStatus = "chan receive (nil chan)"
	StackStatusChanSend       StackStatus = "chan send"
	StackStatusChanSendNil    StackStatus = "chan send (nil chan)"
	StackStatusSemAcquire     StackStatus = "semacquire"
	StackStatusRunning        StackStatus = "running"
	StackStatusRunnable       StackStatus = "runnable"
	StackStatusSleep          StackStatus = "sleep"
	StackStatusFinalizerWait  StackStatus = "finalizer wait"
	StackStatusSyscall        StackStatus = "syscall"
	StackStatusIOWait         StackStatus = "IO Wait"

	StackStatusWrite         StackStatus = "Write"
	StackStatusRead          StackStatus = "Read"
	StackStatusPreviousWrite StackStatus = "Previous write"
	StackStatusPreviousRead  StackStatus = "Previous read"
)

// Traceback represents the per-goroutine stacktraces generated by GOTRACEBACK=1 environment.
type Traceback struct {
	Reason string
	Races  []Stack `json:omitempty`
	Stacks []Stack
}

func (t Traceback) Clone() Traceback {
	tr := t
	tr.Races = make([]Stack, 0, len(t.Races))
	for _, s := range t.Races {
		tr.Races = append(tr.Races, s.Clone())
	}
	tr.Stacks = make([]Stack, 0, len(t.Stacks))
	for _, s := range t.Stacks {
		tr.Stacks = append(tr.Stacks, s.Clone())
	}
	return tr
}

// Stack represents the call stack trace of a goroutine.
type Stack struct {
	ID     int
	Status StackStatus
	Calls  []Call
}

func (s Stack) Clone() Stack {
	st := s
	st.Calls = make([]Call, 0, len(s.Calls))
	for _, c := range s.Calls {
		st.Calls = append(st.Calls, c.Clone())
	}
	return st
}

// Call represents a function call of a call stack trace.
type Call struct {
	Func   string
	Source string
	Line   int
	Args   []uint64
}

func (c Call) Clone() Call {
	ca := c
	ca.Args = make([]uint64, 0, len(c.Args))
	copy(ca.Args, c.Args)
	return ca
}
